version: '3.8'

services:
  restaurant_menu_app:
    container_name: restaurant_menu_app
    volumes:
      - tasks-data:/src/data
    env_file:
      - .env
    environment:
      DB_HOST: 'postgres_db'
      REDIS_HOST: 'redis_db'
      RABBITMQ_HOST: 'rabbitmq'
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint: >
      sh -c "
        echo 'Starting project...' &&
        alembic upgrade head &&
        uvicorn restaurant_menu_app.main:app --host 0.0.0.0 --reload
      "
    networks:
      - prod_network
    ports:
      - "8000:8000"
    depends_on:
      postgres_db:
        condition: service_healthy
      redis_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  postgres_db:
    container_name: postgres_db
    image: postgres:15.1-alpine
    volumes:
      - db-data:/var/lib/postgresql/data/
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    expose:
      - 5432
    ports:
      - "5432:5432"
    networks:
      - prod_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis_db:
    container_name: redis_db
    image: redis:latest
    expose:
      - 6379
    ports:
      - "6379:6379"
    networks:
      - prod_network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  celery:
    container_name: celery
    volumes:
      - tasks-data:/celery/data
    env_file:
      - .env
    environment:
      RABBITMQ_HOST: 'rabbitmq'
    build:
      context: .
      dockerfile: Dockerfile.celery
    entrypoint: >
      sh -c "
        celery -A restaurant_menu_app.tasks.tasks_app:celery_app worker --loglevel=INFO
      "
    networks:
      - prod_network
    depends_on:
      rabbitmq:
        condition: service_healthy

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:latest
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    expose:
      - 5672
      - 15672
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - prod_network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  prod_network:
    name: prod_network
    driver: bridge

volumes:
  db-data:
  tasks-data:
